 $strDomain = "domain.org"
$skypesetting_tmp = get-content "C:\MTR\Change_password\SkypeSettings.xml"
$setting_tmp = "C:\MTR\Change_password\SkypeSettings_tmp.xml"
$skypesetting = "c:\Users\Skype\AppData\Local\Packages\Microsoft.SkypeRoomSystem_8wekyb3d8bbwe\LocalState\SkypeSettings.xml"
$date = Get-Date -Format "yyyy-MM-dd"
$file = Import-CSV "C:\MTR\Change_password\Austin_Change_password.csv"
Add-Type -AssemblyName System.Web
$PasswordLength = 12
$SpecialCharCount = 3

$file | ForEach-Object {
$testConnection = Test-Connection $($_.Host_FQDN)
if ($testConnection -ne $null){
 do {
 $GeneratePassword_email = [System.Web.Security.Membership]::GeneratePassword($PasswordLength, $SpecialCharCount)
 } until ($GeneratePassword_email -notmatch '&|<|>')
 $GeneratePassword_admin = [System.Web.Security.Membership]::GeneratePassword($PasswordLength, $SpecialCharCount)
 $_.Email_Password = $GeneratePassword_email
 $_.Admin_password = $GeneratePassword_admin
 Set-ADAccountPassword -Identity $($_.Email_account) -NewPassword (ConvertTo-SecureString -AsPlainText $GeneratePassword_email -Force)
 $Admin_password = ConvertTo-SecureString $GeneratePassword_admin -AsPlainText -Force
 $Email_password = $GeneratePassword_email
 $Email_address = $($_.Email)
 $s = New-PSSession -ComputerName $($_.Host_FQDN)
 # Change MTR admin password
 Invoke-Command -Session $s -Script{Set-LocalUser -Name Admin -Password $Using:Admin_password}
 # Modify MTR email password setting
 $skypesetting_tmp | Foreach-Object{$_.Replace("meeting_room_email",$Email_address)} | Foreach-Object{$_.Replace("teams_room_password",$Email_password)} | out-file $setting_tmp
 $setting = Get-Content $setting_tmp
 Invoke-Command -Session $s -Script{"$Using:setting" | Out-File $Using:skypesetting}
 Remove-Item -Path $setting_tmp -Force
 Invoke-Command -Session $s -Script{Restart-Computer -Force}
 $_.Result = 'Successful'
 }
 else {$_.Result = 'Fail'}
}
function Send-Log {
param (
[string]$Status,
[string]$Topic,
[string]$Message
)



#$Message = Get-Content -Path $FilePath
#Write-Host $Message

# PROD
$webhook = "https://domain.webhook.office.com/webhookb2/sample"


$first = "{'text':"
$second = "'{0}: {1}" -f $Topic, $Message
$third = "'}"



$teams_msg = "{0}{1}{2}" -f $first,$second,$third
Invoke-RestMethod -Method post -ContentType 'Application/Json' -Body $teams_msg -Uri $webhook
}

$Result = $file | Group-Object Result | Select-Object Name, Count
$Result | ForEach-Object {

if ($($_.Name) -match 'Successful'){
$Successful = $($_.Count) 
}
else {$Fail = $($_.Count) }
}
$Topic = "$date CDC MTR password update status"
$Message = "Successful $Successful, Fail $Fail"
Send-Log  -Topic $Topic -Message $Message 


if ($Fail -ne $null){
$file | ?{ $_.Result -like 'Fail'}| select Host_FQDN | Out-File "C:\MTR\Changed_password.csv"
$FailedList = Get-Content "C:\MTR\Change_password\tmp.csv"
$Message = $FailedList
$Topic = "Failed"
Send-Log  -Topic $Topic -Message $Message
}
else{}

$file | Export-Csv C:\MTR\Change_password\MTR_Password_new.csv -NoTypeInformation
$filepath = "C:\MTR\Change_password\MTR_Password_new.csv"
Send-MailMessage -Body "MTR Password has been updated" -To "dl@domain.com" -Cc "user@domain.com" -From "it@domain.com" -SmtpServer "8.8.8.8" -Subject "MTR Password has been updated" -Attachments $filepath
Remove-Item -Path $filepath -Force 
