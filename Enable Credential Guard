#Write-Host "test"
function Start-Log {
    [CmdletBinding()]
    param (
        [ValidateScript({ Split-Path $_ -Parent | Test-Path })]
        [string]$FilePath
    )
    try {
        if (!(Test-Path $FilePath)) {
            ## Create the log file
            New-Item $FilePath -Type File | Out-Null
        }
        ## Set the global variable to be used as the FilePath for all subsequent #Write-Log calls in this session
        $global:ScriptLogFilePath = $FilePath
    } catch {
        Write-Error $_.Exception.Message
    }
}

function Write-Log {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Message,

        [Parameter()]
        [ValidateSet(1, 2, 3)]
        [int]$LogLevel = 1
    )

    $TimeGenerated = "$(Get-Date -Format HH:mm:ss).$((Get-Date).Millisecond)+000"
    $Line = '<![LOG[{0}]LOG]!><time="{1}" date="{2}" component="{3}" context="" type="{4}" thread="" file="">'
    $LineFormat = $Message, $TimeGenerated, (Get-Date -Format MM-dd-yyyy), "$($MyInvocation.ScriptName | Split-Path ):$($MyInvocation.ScriptLineNumber)", $LogLevel
    $Line = $Line -f $LineFormat
    Add-Content -Value $Line -Path $ScriptLogFilePath
}

function Send-Log {
    param (
        [string]$FilePath,
        [string]$Hostname,
        [string]$Message
    )

    # PROD
    $webhook = "https://webhook.office.com/webhookb2/Sample"

    $first = "{'text':"
    $second = "'{0}: {1}" -f $HOSTNAME, $Message
    $third = "'}"

    $teams_msg = "{0}{1}{2}" -f $first,$second,$third
    #Invoke-RestMethod -Method post -ContentType 'Application/Json' -Body $teams_msg -Uri $webhook
}

$HOSTNAME = ((Get-ComputerInfo).CsName) #(Get-ComputerInfo -Property "CsName") 

# Write beginning of log file
#Write-Log -Message 'Starting configuration for Credential Guard'
 
$EncryptionData= Get-WmiObject -Namespace ROOT\CIMV2\Security\Microsoftvolumeencryption -Class Win32_encryptablevolume -Filter "DriveLetter = 'c:'"
 
$protectionState = $EncryptionData.GetConversionStatus()
 
$CurrentEncryptionProgress = $protectionState.EncryptionPercentage
 
switch ($ProtectionState.Conversionstatus){
 
"0" {
 
    $Properties = @{'EncryptionState'='Decrypted';'CurrentEncryptionProgress'=$CurrentEncryptionProgress}
 
    $Return = New-Object psobject -Property $Properties
 
    }
 
"1" {
 
    $Properties = @{'EncryptionState'='Encrypted';'CurrentEncryptionProgress'=$CurrentEncryptionProgress}
 
    $Return = New-Object psobject -Property $Properties
 
    }
 
"2" {
 
    $Properties = @{'EncryptionState'='EncryptionInProgress';'CurrentEncryptionProgress'=$CurrentEncryptionProgress}
 
    $Return = New-Object psobject -Property $Properties
 
    }
 
"3" {
 
    $Properties = @{'EncryptionState'='DecryptionInProgress';'CurrentEncryptionProgress'=$CurrentEncryptionProgress}
 
    $Return = New-Object psobject -Property $Properties
 
    }
 
"4" {
 
    $Properties = @{'EncryptionState'='EncryptionPaused';'CurrentEncryptionProgress'=$CurrentEncryptionProgress}
 
    $Return = New-Object psobject -Property $Properties
 
    }
 
"5" {
 
    $Properties = @{'EncryptionState'='DecryptionPaused';'CurrentEncryptionProgress'=$CurrentEncryptionProgress}
 
    $Return = New-Object psobject -Property $Properties
 
    }
 
default {
 
    write-verbose "Couldn't retrieve an encryption state."
 
    $Properties = @{'EncryptionState'=$false;'CurrentEncryptionProgress'=$false}
 
    $Return = New-Object psobject -Property $Properties
 
    }
}

$encryption_progress = $return.CurrentEncryptionProgress
$encryption_state = $return.EncryptionState

if ($encryption_progress -ne '100' -and $encryption_state -ne 'Encrypted' ) {
    $output = "FAILED - Encryption progress is $($encryption_progress) and encryption state is $($encryption_state)"
    $ScriptLogFilePath = "C:\Decrypted.log"
    Start-Log -FilePath $ScriptLogFilePath
    Write-Log -Message $output -LogLevel 3
    Send-Log -FilePath $ScriptLogFilePath -Hostname $HOSTNAME -Message $output
    return "false"
}
# Add required registry key for Credential Guard
$RegistryKeyPath = "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard"
if (-not(Test-Path -Path $RegistryKeyPath)) {
    #Write-Log -Message 'Creating HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard registry key'
    New-Item -Path $RegistryKeyPath -ItemType Directory -Force

    #ENABLE WINDOWS FEATURES LIKE HYPER-V OR ISOLATE MODE
        
    if ([int](Get-WmiObject -Class Win32_OperatingSystem).BuildNumber -lt 14393) {
        try {
            # For version older than Windows 10 version 1607 (build 14939), enable required Windows Features for Credential Guard
            Enable-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-HyperVisor -Online -All -LimitAccess -NoRestart -ErrorAction Stop
            #Write-Log -Message "Successfully enabled Microsoft-Hyper-V-HyperVisor feature"

            # For version older than Windows 10 version 1607 (build 14939), add the IsolatedUserMode feature as well
            Enable-WindowsOptionalFeature -FeatureName IsolatedUserMode -Online -All -LimitAccess -NoRestart -ErrorAction Stop
            #Write-Log -Message "Successfully enabled IsolatedUserMode feature"
        }
        catch [System.Exception] {
            $Message = 'An error occured when enabling required windows features'
            #Send-Log -FilePath $ScriptLogFilePath -Hostname $HOSTNAME -Message $Message
            #Write-Log -Message $Message -LogLevel 3
        }
    }

    # Add registry value RequirePlatformSecurityFeatures - 1 for Secure Boot only, 3 for Secure Boot and DMA Protection
    #Write-Log -Message "Adding HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard\RequirePlatformSecurityFeatures value as DWORD with data 1"
    New-ItemProperty -Path $RegistryKeyPath -Name RequirePlatformSecurityFeatures -PropertyType DWORD -Value 1

    # Add registry value EnableVirtualizationBasedSecurity - 1 for Enabled, 0 for Disabled
    #Write-Log -Message "Adding HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceGuard\EnableVirtualizationBasedSecurity value as DWORD with data 1"
    New-ItemProperty -Path $RegistryKeyPath -Name EnableVirtualizationBasedSecurity -PropertyType DWORD -Value 1

    # Add registry value LsaCfgFlags - 1 enables Credential Guard with UEFI lock, 2 enables Credential Guard without lock, 0 for Disabled
    #Write-Log -Message "Adding HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\LsaCfgFlags value as DWORD with data 1"
    New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name LsaCfgFlags -PropertyType DWORD -Value 1

}

    
# Check if Credential Guard is enabled
  
$AVAILABLESECURITYPROPERTIES = ((Get-CimInstance –ClassName Win32_DeviceGuard –Namespace root\Microsoft\Windows\DeviceGuard).AvailableSecurityProperties) -join ","
$REQUIREDSECURITYPROPERTIES = ((Get-CimInstance –ClassName Win32_DeviceGuard –Namespace root\Microsoft\Windows\DeviceGuard).RequiredSecurityProperties) -join ","
$CONFIGUREDSECURITYSERVICES = ((Get-CimInstance –ClassName Win32_DeviceGuard –Namespace root\Microsoft\Windows\DeviceGuard).SecurityServicesConfigured) -join ","
$RUNNINGSECURITYPROPERTIES = ((Get-CimInstance –ClassName Win32_DeviceGuard –Namespace root\Microsoft\Windows\DeviceGuard).SecurityServicesRunning) -join ","
$VIRTUALIZATIONBASEDSECURITY = (Get-CimInstance –ClassName Win32_DeviceGuard –Namespace root\Microsoft\Windows\DeviceGuard).VirtualizationBasedSecurityStatus

$message= "Output   \n   \nAvailable Security features: {0}   \n   \nRequired security features: {1}   \n   \nConfigured Security Services: {2}   \n   \nRunning security features: {3}   \n   \nVirtualization Based Security: {4}" -f $AVAILABLESECURITYPROPERTIES,$REQUIREDSECURITYPROPERTIES, $CONFIGUREDSECURITYSERVICES, $RUNNINGSECURITYPROPERTIES,$VIRTUALIZATIONBASEDSECURITY
#Write-Log -Message $output

$message1 = ""
$message2 = ""
$message3 = ""
$message4 = ""
$message5 = ""
$message6 = ""
#Write-Host $CONFIGUREDSECURITYSERVICES
#Write-Host $RUNNINGSECURITYPROPERTIES
#Write-Host $VIRTUALIZATIONBASEDSECURITY


if ($CONFIGUREDSECURITYSERVICES -like "*1*" -and $RUNNINGSECURITYPROPERTIES -like "*1*" -and $VIRTUALIZATIONBASEDSECURITY -like "*2*") {
    $output="Credential guard is successful on this machine"
    #Send-Log -FilePath $ScriptLogFilePath -Hostname $HOSTNAME -Message $output
    $ScriptLogFilePath = "C:\CredentialGuardEnabled.log"
    #Write-Host "test"
    Start-Log -FilePath $ScriptLogFilePath
    Write-Log -Message $output
    return "true"
} elseif ($RUNNINGSECURITYPROPERTIES -eq "0") {
    # Check for secure boot

    try {
        $secureboot = Confirm-SecureBootUEFI | Out-String
        $message1 = "Secure boot enabled {0}" -f $secureboot
        #Write-Log -Message $message1
    } catch {
        $message1 = "FAILED - Secure boot enabled: false"
    }

    # Check for Event ID 15 from WinInit - Credential Guard is configured but the secure kernel is not running; continuing without Credential Guard.

    $wininit_15 = Get-EventLog -LogName System -Message '*Credential Guard is configured but the secure kernel is not running; continuing without Credential Guard*' -newest 1 | Select-Object -Property Message | Out-String 
    $message2 = "Wininit Event ID 15 No Secureboot, {0}" -f  $wininit_15
    if ($wininit_15 -ne "") {
        $ScriptLogFilePath = "C:\NoSecureBoot.log"
        Start-Log -FilePath $ScriptLogFilePath
        Write-Log -Message $message2
        Send-Log -FilePath $ScriptLogFilePath -Hostname $HOSTNAME -Message $message2
        return "false"
    }

    # Check for Event ID 124 from Kernel-Boot 

    $kernelboot_124 = Get-EventLog -LogName System -Message '*The virtualization-based security enablement policy check at phase 0 failed with status*' -newest 1 | Select-Object -Property Message | Out-String 
    $message3 = "FAILED - Kernel boot Event ID 124, {0}" -f  $kernelboot_124 
    if ($kernelboot_124 -ne "") {
        $ScriptLogFilePath = "C:\OtherError-VBSPolicy.log"
        Start-Log -FilePath $ScriptLogFilePath
        Write-Log -Message $message3
        Send-Log -FilePath $ScriptLogFilePath -Hostname $HOSTNAME -Message $message3
        return "false"
    }

    # Check for Event ID 41 from Hyper-V-Hypervisor

    $hyperv_41 = Get-EventLog -LogName System -Message '*Hypervisor launch failed; Either VMX not present or not enabled in BIOS.*' -newest 1 | Select-Object -Property Message | Out-String 
    $message4 = "FAILED - Hyperv Event ID 41, {0}" -f  $hyperv_41 
    if ($hyperv_41 -ne "") {
        $ScriptLogFilePath = "C:\OtherError-VMX.log"
        Start-Log -FilePath $ScriptLogFilePath
        Write-Log -Message $message4
        Send-Log -FilePath $ScriptLogFilePath -Hostname $HOSTNAME -Message $message4
        return "false"
    }

    $message6 = "FAILED - Services not running, try to reboot machine"
    $ScriptLogFilePath = "C:\OtherError-Reboot.log"
    Start-Log -FilePath $ScriptLogFilePath
    Write-Log -Message $message6
    Send-Log -FilePath $ScriptLogFilePath -Hostname $HOSTNAME -Message $message6
    return "false"
}
